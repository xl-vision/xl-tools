const webpack = require('webpack')
const TerserPlugin = require('terser-webpack-plugin')
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')
const pkg = require('../../package.json')
const WebpackBar = require('webpackbar')

module.exports = ({
  input,
  output,
  babelConfig,
  tsconfigPath,
  isSourceMap,
  bannerMessage,
  isProduction
}) => {
  const isDevelopment = !isProduction

  if (typeof babelConfig === 'string') {
    babelConfig = require(babelConfig)
  }

  const webpackConfig = {
    mode: isProduction ? 'production' : 'development',
    bail: isProduction,
    devtool: isProduction ? isSourceMap ? 'source-map' : false : 'cheap-module-source-map',
    entry: [
      input
    ].filter(Boolean),
    output: {
      libraryTarget: 'umd',
      umdNamedDefine: true,
      path: output,
      pathinfo: isDevelopment
      // filename: isProduction ? 'static/js/[name].[contenthash:8].js' : 'js/[name].js',
      // chunkFilename: isProduction ? 'static/js/[name].[contenthash:8].chunk.js' : 'js/[name].chunk.js',
      // publicPath: isProduction ? publicPath : '/'
    },
    optimization: {
      minimize: isProduction,
      minimizer: [
        new TerserPlugin({
          terserOptions: {
            parse: {
              ecma: 8
            },
            compress: {
              ecma: 5,
              warnings: false,
              comparisons: false,
              inline: 2
            },
            mangle: {
              safari10: true
            },
            output: {
              ecma: 5,
              comments: false,
              ascii_only: true
            }
          },
          parallel: true,
          cache: true,
          sourceMap: isSourceMap
        })
      ]
    },
    resolve: {
      extensions: ['.js', '.jsx', '.ts', '.tsx', '.json', '.scss'],
      alias: {
        'react-native': 'react-native-web'
      },
      plugins: [
      ]
    },
    module: {
      strictExportPresence: true,
      rules: [
        // Disable require.ensure as it's not a standard language feature.
        { parser: { requireEnsure: false } },
        {
          test: /\.(js|jsx|ts|tsx)$/,
          loader: require.resolve('babel-loader'),
          exclude: /node_modules/,
          options: {
            ...babelConfig,
            babelrc: false,
            configFile: false
          }
        }
        // {
        //   loader: require.resolve('file-loader'),
        //   exclude: [/\.(js|jsx|ts|tsx)$/, /\.html$/, /\.json$/],
        //   options: {
        //     name: 'static/media/[name].[hash:8].[ext]'
        //   }
        // }
      ]
    },
    plugins: [
      new webpack.optimize.ModuleConcatenationPlugin(),
      new WebpackBar({
        name: pkg.name
      }),
      new webpack.BannerPlugin(
        bannerMessage ||
        `File is generated by ${pkg.name} v${pkg.version}.\nsee: ttps://github.com/xl-vision/xl-tools\n`
      ),
      // Moment.js is an extremely popular library that bundles large locale files
      // by default due to how Webpack interprets its code. This is a practical
      // solution that requires the user to opt into importing specific locales.
      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack
      // You can remove this if you don't use Moment.js:
      new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
      new ForkTsCheckerWebpackPlugin({
        async: isDevelopment,
        useTypescriptIncrementalApi: true,
        checkSyntacticErrors: true,
        tsconfig: tsconfigPath,
        silent: true
      })
    ].filter(Boolean)
  }

  return webpackConfig
}
