const merge = require('webpack-merge')
const getBaseWebpackConfig = require('../lib/getBaseWebpackConfig')
const runWebpack = require('../utils/runWebpack')
const pkg = require('../package')
const webpack = require('webpack')
const getConfig = require('../utils/getConfig')

const build = ({
  isProduction,
  isSourceMap = true,
  bannerMessage
}) => {

  const baseConfig = getBaseWebpackConfig({
    isProduction,
    isSourceMap,
  })

  const extraConfig = {
    entry: ,
    output,
    externals: {
      react: {
        commonjs: 'react',
        commonjs2: 'react',
        amd: 'react',
        root: 'React'
      },
      'react-dom': {
        commonjs: 'react-dom',
        commonjs2: 'react-dom',
        amd: 'react-dom',
        root: 'ReactDOM'
      }
    },
    plugins: [
      new webpack.BannerPlugin(
        bannerMessage ||
        `File is generated by ${pkg.name} v${pkg.version}.\nsee: ttps://github.com/xl-vision/xl-tools\n`
      ),
    ]
  }
  let config = merge(baseConfig, extraConfig)

  const webpackCall = getConfig('webpack')

  if(webpackCall) {
    config = webpackCall(config, {
      isProduction
    })
  }
  return runWebpack(config)
}

module.exports = () => {
  // dev
  const promise1 = build({
    isProduction: false,
  })
}